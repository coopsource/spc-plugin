#JSGF V1.0;

/**
 * JSGF Grammar for Hello World example
 */

grammar statement;

public <standard_statements> = <statement>;

<statement> = <assignment>
			| <printFrags>
			| return <expression>
			| <whileFrags>
			| <ifFrags>
			| <inputFrags>
			| nothing
			| call <definedSymbols> [ <withFrags> ]
			;
	
<assignment> = Set <id> to <expression>
			 | Set element (<number> | <definedSymbols>) of <id> to <expression>
			 | Set <id> to <callExprFrags>
			 | Set element (<number> | <definedSymbols>) of <id> to <callExprFrags>
			 ;

<printFrags> = print <expression>
			 | print <callExprFrags>
			 | print space
             | new line
             ;

<inputFrags> = read <id>
			 | read <arrayRef>
			 ;

<whileFrags> = while <boolExpr> do {goto_while}
			 ;

<ifFrags> = if <boolExpr> then {goto_if_block}
		  ;

<boolExpr> = <atom> <boolop> <atom> ;

<boolop> = [is] less than | [is] greater than | equals | not equals | [is] less than or equal to | [is] greater than or equal to;

<expression> = <atom> 
			 | <atom> (plus | minus | times | divided by | over) <atom>
             ;

<atom> = <number> | <definedSymbols> | <arrayRef> | <string> ; 

<callExprFrags> = the result of calling <definedSymbols> [ <withFrags> ]
                ;

<arrayRef> = element (<number> | <definedSymbols>) of <definedSymbols> ;

<withFrags> = with <expression> (and <expression>)*
            ;

<number> = zero | one | two | three | four | five | six | seven | eight | nine | ten | eleven | twenty;

<id> = X | Y | Z | A | B | C | D | F | G | I | J | K | L | M | N | P | Q | R | main | sort | min | max | average | fact | short;

<definedSymbols> = <VOID> ;

<string> = the string {goto_string} ;
